{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "Your ultimate destination for all things fresh, flavorful, and fabulous â€“ where convenience meets quality in our one-stop grocery wonderland!",
        "title": "One Stop GroceryðŸ›’",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "paths": {
        "/bulkupload": {
            "post": {
                "description": "Uploads a file containing grocery items in CSV or JSON format to the server, which then processes and stores the items",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Upload a file with grocery items",
                "operationId": "bulk-upload",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File containing grocery items (CSV or JSON)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "File Uploaded to Cloud Storage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format\" or \"Failed to parse multipart form\" or \"Failed to determine file type\" or \"Failed to get file",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create Storage client\" or \"Failed to upload file to cloud storage",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/createGroceryItem": {
            "post": {
                "description": "Creates a new grocery item and uploads its image to your database. Image is optional, you can add it later by using update method as well. Do provide 'Bearer' before adding authorization token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new grocery item",
                "operationId": "create-grocery-item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "json",
                        "description": "JSON data for the grocery item",
                        "name": "json-data",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Optional: Image file for the grocery item",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Grocery item created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/deleteGroceryItemByID/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Deletes a grocery item from your database based on the provided ID. Do provide 'Bearer' before adding authorization token",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete a grocery item by ID",
                "operationId": "delete-grocery-item-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Grocery item ID to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Grocery item deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fetchGroceryItemByID/{id}": {
            "get": {
                "description": "Fetches a grocery item from the Firestore database based on the provided ID.",
                "produces": [
                    "application/json"
                ],
                "summary": "Fetch a grocery item by ID",
                "operationId": "fetch-item-by-id",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "format": "int64",
                        "description": "ID of the grocery item",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Grocery item fetched successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.GroceryItem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/listGroceryItems": {
            "get": {
                "description": "Retrieves a list of grocery items from the Firestore database based on the provided query parameters.",
                "produces": [
                    "application/json"
                ],
                "summary": "List grocery items based on query parameters",
                "operationId": "list-items-by",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by product name",
                        "name": "productName",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by price",
                        "name": "price",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by minimum price",
                        "name": "price_min",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "Filter by maximum price",
                        "name": "price_max",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by category",
                        "name": "Category",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Number of items per page",
                        "name": "pageSize",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int32",
                        "description": "Page number",
                        "name": "pageNumber",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "List Of Grocery Items",
                        "schema": {
                            "type": "Object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/updateGroceryItemByID/{id}": {
            "put": {
                "security": [
                    {
                        "BearerToken": []
                    }
                ],
                "description": "Updates an existing grocery item with the provided information and uploads a new image if provided. Do provide 'Bearer' before adding authorization token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update an existing grocery item",
                "operationId": "update-grocery-item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID of the grocery item to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "json",
                        "description": "JSON data for the updated grocery item",
                        "name": "json-data",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Optional: New image file for the updated grocery item",
                        "name": "image",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Grocery item updated successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format\" or \"Missing fields in the request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Token not provided\" or \"Invalid token",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Grocery item not found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update grocery item in Firestore\" or \"Failed to publish audit record",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/userLogin": {
            "post": {
                "description": "Authenticates a user with the provided email and password, returning a JWT token upon success",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Log in a user",
                "operationId": "login-user",
                "parameters": [
                    {
                        "description": "Login credentials (email and password)",
                        "name": "loginCredentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid email or password",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to generate token",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Creates a new user with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Create a new user",
                "operationId": "create-new-user",
                "parameters": [
                    {
                        "description": "User object to be created",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User Created Successfully. userID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request format\" or \"Missing fields in the request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error\" or \"Failed to create user in Firestore",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "handlers.GroceryItem": {
            "type": "object",
            "properties": {
                "brand": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "countryOfOrigin": {
                    "type": "string"
                },
                "expDate": {
                    "type": "object",
                    "properties": {
                        "month": {
                            "type": "integer"
                        },
                        "year": {
                            "type": "integer"
                        }
                    }
                },
                "itemPackageQuantity": {
                    "type": "integer"
                },
                "manufacturer": {
                    "type": "string"
                },
                "mfgDate": {
                    "type": "object",
                    "properties": {
                        "month": {
                            "type": "integer"
                        },
                        "year": {
                            "type": "integer"
                        }
                    }
                },
                "packageInformation": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "productName": {
                    "type": "string"
                },
                "vegetarian": {
                    "type": "boolean"
                },
                "weight": {
                    "type": "number"
                },
                "weightUnit": {
                    "type": "string"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.LoginUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "description": "not string hashed password",
                    "type": "string"
                },
                "role": {
                    "description": "Role ? Admin OR manager - one role for now - admin",
                    "type": "string"
                }
            }
        }
    }
}